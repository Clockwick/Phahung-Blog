"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var is_absolute_url_1 = __importDefault(require("is-absolute-url"));
var utils_1 = require("../utils");
var MetaHeadEmbed = function (_a) {
    var render = _a.render, pageTitle = _a.pageTitle, siteTitle = _a.siteTitle, titleTemplate = _a.titleTemplate, description = _a.description, _b = _a.disableCanonical, disableCanonical = _b === void 0 ? false : _b, baseSiteUrl = _a.baseSiteUrl, pagePath = _a.pagePath, keywords = _a.keywords, imageUrl = _a.imageUrl, imageAlt = _a.imageAlt, _c = _a.imageWidth, imageWidth = _c === void 0 ? 1200 : _c, _d = _a.imageHeight, imageHeight = _d === void 0 ? 630 : _d, _e = _a.locale, locale = _e === void 0 ? "en_US" : _e, twitter = _a.twitter;
    var title = siteTitle;
    if (titleTemplate && pageTitle && pageTitle !== siteTitle) {
        title = titleTemplate
            .replace("[pageTitle]", pageTitle)
            .replace("[siteTitle]", siteTitle);
    }
    var pageUrl = pagePath
        ? is_absolute_url_1.default(pagePath)
            ? pagePath
            : baseSiteUrl + "/" + pagePath
        : baseSiteUrl;
    var image = imageUrl &&
        (is_absolute_url_1.default(imageUrl) ? imageUrl : baseSiteUrl + "/" + imageUrl);
    var metaEmbed = [
        react_1.default.createElement("title", { key: "title" }, title),
        react_1.default.createElement("meta", { key: "meta:description", name: "description", content: description }),
        keywords && (react_1.default.createElement("meta", { key: "meta:keywords", name: "keywords", content: utils_1.commaSeparate(keywords) })),
        !disableCanonical && (react_1.default.createElement("link", { key: "canonical", rel: "canonical", href: pageUrl })),
        react_1.default.createElement("meta", { key: "og:type", property: "og:type", content: "website" }),
        react_1.default.createElement("meta", { key: "og:url", property: "og:url", content: pageUrl }),
        react_1.default.createElement("meta", { key: "og:title", property: "og:title", content: title }),
        react_1.default.createElement("meta", { key: "og:description", property: "og:description", content: description }),
        react_1.default.createElement("meta", { key: "og:image", property: "og:image", content: image }),
        react_1.default.createElement("meta", { key: "og:image:width", property: "og:image:width", content: imageWidth.toString() }),
        react_1.default.createElement("meta", { key: "og:image:height", property: "og:image:height", content: imageHeight.toString() }),
        react_1.default.createElement("meta", { key: "og:image:alt", property: "og:image:alt", content: imageAlt }),
        react_1.default.createElement("meta", { key: "og:site_name", property: "og:site_name", content: siteTitle }),
        react_1.default.createElement("meta", { key: "og:locale", property: "og:locale", content: locale }),
    ];
    var twitterEmbed = function (_a) {
        var cardSize = _a.cardSize, title = _a.title, description = _a.description, siteUsername = _a.siteUsername, creatorUsername = _a.creatorUsername, imageUrl = _a.imageUrl, imageAlt = _a.imageAlt;
        return [
            react_1.default.createElement("meta", { key: "twitter:card", name: "twitter:card", content: cardSize === "large" ? "summary_large_image" : "summary" }),
            title && react_1.default.createElement("meta", { key: "twitter:title", name: "twitter:title", content: title }),
            description && (react_1.default.createElement("meta", { key: "twitter:description", name: "twitter:description", content: description })),
            siteUsername && (react_1.default.createElement("meta", { key: "twitter:site", name: "twitter:site", content: siteUsername })),
            creatorUsername && (react_1.default.createElement("meta", { key: "twitter:creator", name: "twitter:creator", content: creatorUsername })),
            imageUrl && (react_1.default.createElement("meta", { key: "twitter:image", name: "twitter:image", content: imageUrl })),
            imageAlt && (react_1.default.createElement("meta", { key: "twitter:alt", name: "twitter:image:alt", content: imageAlt })),
        ];
    };
    return render([metaEmbed, twitter && twitterEmbed(__assign({}, twitter))]);
};
exports.default = MetaHeadEmbed;
//# sourceMappingURL=MetaHeadEmbed.js.map