var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/index.ts
import path2 from "path";
import {ESLint} from "eslint";
import {createFilter} from "@rollup/pluginutils";

// src/utils.ts
import qs from "querystring";
import path from "path";
function normalizePath(id) {
  return path.relative(process.cwd(), id).split(path.sep).join("/");
}
function checkVueFile(id) {
  if (!id.includes("?"))
    return false;
  const rawQuery = id.split("?", 2)[1];
  return qs.parse(rawQuery).vue !== null ? true : false;
}

// src/index.ts
function eslintPlugin(options = {}) {
  const defaultOptions = {
    cache: true,
    fix: false,
    include: [
      "src/**/*.js",
      "src/**/*.jsx",
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.vue"
    ],
    throwOnWarning: true,
    throwOnError: true
  };
  const opts = __spreadValues(__spreadValues({}, defaultOptions), options);
  const eslint = new ESLint({
    cacheLocation: path2.resolve(process.cwd(), "./node_modules/.vite/vite-plugin-eslint"),
    cache: opts.cache,
    fix: opts.fix
  });
  const filter = createFilter(opts.include, opts.exclude || /node_modules/);
  let formatter;
  return {
    name: "vite:eslint",
    async transform(_, id) {
      const file = normalizePath(id);
      if (!filter(id) || await eslint.isPathIgnored(file) || checkVueFile(id)) {
        return null;
      }
      switch (typeof opts.formatter) {
        case "string":
          formatter = await eslint.loadFormatter(opts.formatter);
          break;
        case "function":
          ({formatter} = opts);
          break;
        default:
          formatter = await eslint.loadFormatter("stylish");
      }
      const report = await eslint.lintFiles(file);
      const hasWarnings = opts.throwOnWarning && report.some((item) => item.warningCount !== 0);
      const hasErrors = opts.throwOnError && report.some((item) => item.errorCount !== 0);
      const result = formatter.format(report);
      if (opts.fix && report) {
        ESLint.outputFixes(report);
      }
      if (hasWarnings) {
        this.warn(result);
      }
      if (hasErrors) {
        this.error(result);
      }
      return null;
    }
  };
}
export {
  eslintPlugin as default
};
